import React from 'react';
import './CommonStyles.css';

const SQLInjectionVulnerabilityReport = () => {
  return (
    <div className="report-content">
      {/* Report Header */}
      <div className="report-header">
        <h1>SQL Injection Vulnerability Report</h1>
        <p><strong>Prepared for:</strong> DVWA</p>
        <p><strong>Date:</strong> October 25, 2024</p>
        <p><strong>Author:</strong> Michael Sasso</p>
      </div>

      {/* Executive Summary */}
      <div className="content-section">
        <h2>1. Executive Summary</h2>
        <p>
          This report provides a detailed analysis of a critical SQL Injection vulnerability identified in the <strong>id</strong> parameter of the URL: <code>http://localhost/vulnerabilities/sqli</code> Based on the OWASP Testing Guide (OTG) standards, this vulnerability could lead to unauthorized access, data exfiltration, and potentially full database compromise, which would critically impact data integrity and system security.
        </p>
      </div>

      {/* Scope */}
      <div className="content-section">
        <h2>2. Scope</h2>
        <p><strong>Target URL:</strong> <code>http://localhost/vulnerabilities/sqli/?id=...</code></p>
        <p><strong>Target Technology Stack:</strong></p>
        <ul>
          <li>Operating System: Linux Debian 9 (Stretch)</li>
          <li>Web Server: Apache 2.4.25</li>
          <li>Database: MySQL 5.1 (MariaDB fork)</li>
        </ul>
        <p><strong>Testing Tool:</strong> SQLMap</p>
        <p><strong>Testing Date:</strong> October 25, 2024</p>
      </div>

      {/* Vulnerability Details */}
      <div className="content-section">
        <h2>3. Vulnerability Details</h2>
        <h3>3.1. Injection Point (OTG-INPVAL-005)</h3>
        <ul>
          <li><strong>Parameter:</strong> id (GET)</li>
          <li><strong>Vulnerability Type:</strong> SQL Injection (Error-based, Time-based Blind, UNION Query)</li>
        </ul>
        <p>
          The <strong>id</strong> parameter was determined to be vulnerable to SQL injection via error-based, time-based blind, and UNION-based techniques, allowing an attacker to manipulate SQL queries.
        </p>
        
        <h3>3.2. Example Payloads</h3>
        <p><strong>Error-based Injection (OTG-INPVAL-005):</strong></p>
        <p>{`id=sdf' AND EXTRACTVALUE(9380,CONCAT(0x5c,0x716b6a7a71,(SELECT (ELT(9380=9380,1))),0x71626b6271)) AND 'HJao'='HJao`}</p>
        <p>
          This demonstrates how error-based injection can disclose sensitive information through database error messages.
        </p>

        <p><strong>Time-based Blind Injection (OTG-INPVAL-006):</strong></p>
        <p>{`id=sdf' AND (SELECT 3644 FROM (SELECT(SLEEP(5)))PrVp) AND 'kZgo'='kZgo`}</p>
        <p>
          This payload introduces a delay to confirm SQL injection vulnerability through time-based inference.
        </p>

        <p><strong>UNION Query Injection (OTG-INPVAL-001):</strong></p>
        <p>{`id=sdf' UNION ALL SELECT CONCAT(0x716b6a7a71,0x455a4b73444d5a4949674a596f504147764c4e71524a5a64687443484846656e764b6e4572557266,0x71626b6271),NULL-- -`}</p>
        <p>
          This UNION query retrieves specific hex-encoded information from the database, allowing exfiltration of sensitive data.
        </p>
      </div>

      {/* Exploited Information */}
      <div className="content-section">
        <h2>4. Exploited Information</h2>
        <p>Data retrieved from the database includes:</p>
        <p><strong>Database Name:</strong> dvwa</p>
        <p><strong>Tables Identified:</strong></p>
        <ul>
          <li><strong>users</strong> - Columns: user, avatar, failed_login, first_name, last_login, last_name, password, user_id</li>
          <li><strong>guestbook</strong> - Columns: comment, name, comment_id</li>
        </ul>
        <p>
          <strong>Potential Impact:</strong> Exposure of user credentials and personal information, which attackers could use to gain unauthorized access to user accounts.
        </p>
      </div>

      {/* Risk and Impact Analysis */}
      <div className="content-section">
        <h2>5. Risk and Impact Analysis</h2>
        <h3>5.1. Severity Rating</h3>
        <p><strong>CVSS Score:</strong> 9.8 (Critical)</p>
        <p>
          <strong>Impact:</strong> The vulnerability enables potential data theft, database manipulation, and system compromise.
        </p>

        <h3>5.2. Business Impact</h3>
        <p>
          Exploiting this SQL injection vulnerability can lead to data breaches, compliance violations, and reputational damage, all of which could have significant financial and operational repercussions.
        </p>
      </div>

      {/* Mitigation Recommendations */}
      <div className="content-section">
        <h2>6. Mitigation Recommendations (Aligned with OWASP Standards)</h2>
        <h3>6.1. Input Validation and Parameterized Queries (OTG-INPVAL-006)</h3>
        <ul>
          <li>Implement strict input validation on all user inputs.</li>
          <li>Use parameterized queries or ORM to prevent SQL injections.</li>
        </ul>

        <h3>6.2. Error Handling (OTG-ERR-001)</h3>
        <p>Disable detailed error messages in production environments to prevent attackers from gathering sensitive information.</p>

        <h3>6.3. Web Application Firewall (WAF)</h3>
        <p>Deploy a WAF to detect and block SQL injection attempts.</p>

        <h3>6.4. Principle of Least Privilege (OTG-AUTHZ-001)</h3>
        <p>Restrict database user privileges to the minimum required for operational tasks.</p>

        <h3>6.5. Regular Security Audits (OTG-INFO-002)</h3>
        <p>Schedule routine security audits and penetration tests to identify and address vulnerabilities.</p>
      </div>

      {/* Further Testing */}
      <div className="content-section">
        <h2>7. Further Testing</h2>
        <ul>
          <li>Manual SQL Injection Attempts</li>
          <li>Privilege Escalation Testing</li>
          <li>Cross-Site Scripting (XSS)</li>
          <li>Session Management Testing</li>
        </ul>
      </div>

      {/* Conclusion */}
      <div className="content-section">
        <h2>8. Conclusion</h2>
        <p>
          This SQL injection vulnerability poses a severe risk to the web applicationâ€™s security and data integrity. Immediate remediation is advised to mitigate the risk of data breach and potential compliance issues.
        </p>
      </div>

      {/* Appendix */}
      <div className="content-section">
        <h2>9. Appendix</h2>
        <ul>
          <li>Log Files: SQLMap output logs (attached)</li>
          <li>Payloads and Queries: SQLMap payloads used during testing.</li>
        </ul>
      </div>
    </div>
  );
};

export default SQLInjectionVulnerabilityReport;
