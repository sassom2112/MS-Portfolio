// src/pages/markdown/SQLInjectionVulnerabilityReport.jsx
import React from 'react';
import './CommonStyles.css';

const SQLInjectionVulnerabilityReport = () => {
  return (
    <div className="report-content">
      <div className="report-header">
        <h1>SQL Injection Vulnerability Report</h1>
        <p><strong>Prepared for:</strong> DVWA</p>
        <p><strong>Date:</strong> October 25, 2024</p>
        <p><strong>Author:</strong> Michael Sasso</p>
      </div>

      <div className="content-section">
        <h2>1. Executive Summary</h2>
        <p>
          During the penetration testing of your web application, a critical SQL Injection vulnerability was identified in the 
          id parameter of the URL <code>http://localhost/vulnerabilities/sqli</code>. This vulnerability allows an attacker to 
          manipulate the backend database by injecting malicious SQL queries. Exploiting this vulnerability could result in 
          unauthorized data access, exfiltration of sensitive information, and potential system compromise.
        </p>
      </div>

      <div className="content-section">
        <h2>2. Scope</h2>
        <p><strong>Target URL:</strong> <code>http://localhost/vulnerabilities/sqli/?id=...</code></p>
        <p><strong>Target Technology Stack:</strong></p>
        <ul>
          <li>Operating System: Linux Debian 9 (Stretch)</li>
          <li>Web Server: Apache 2.4.25</li>
          <li>Database: MySQL 5.1 (MariaDB fork)</li>
        </ul>
        <p><strong>Testing Tool:</strong> SQLMap</p>
        <p><strong>Testing Date:</strong> [Date]</p>
      </div>

      <div className="content-section">
        <h2>3. Vulnerability Details</h2>
        <h3>3.1. Injection Point</h3>
        <ul>
          <li><strong>Parameter:</strong> id (GET)</li>
          <li><strong>Vulnerability Type:</strong> SQL Injection (Error-based, Time-based Blind, UNION Query)</li>
        </ul>
        <p>
          SQLMap identified multiple forms of SQL injection, confirming that the id parameter was susceptible to the following attack types:
        </p>
        <ul>
          <li><strong>Error-based Injection:</strong> Using database error messages to extract sensitive information.</li>
          <li><strong>Time-based Blind Injection:</strong> Delayed database responses (using <code>SLEEP()</code>) to confirm the presence of vulnerabilities.</li>
          <li><strong>UNION-based Injection:</strong> Combining multiple SELECT queries to retrieve information.</li>
        </ul>

        <h3>3.2. Example Payloads</h3>
        <p><strong>Error-based Injection:</strong></p>
        <pre><code>
          {`id=sdf' AND EXTRACTVALUE(9380,CONCAT(0x5c,0x716b6a7a71,(SELECT (ELT(9380=9380,1))),0x71626b6271)) AND 'HJao'='HJao`}
        </code></pre>
        <p>
          This payload demonstrates how an attacker can exploit error messages generated by the database to disclose data.
        </p>

        <p><strong>Time-based Blind Injection:</strong></p>
        <pre><code>
          {`id=sdf' AND (SELECT 3644 FROM (SELECT(SLEEP(5)))PrVp) AND 'kZgo'='kZgo`}
        </code></pre>
        <p>
          This payload causes a delay of 5 seconds, confirming the injection point through timing-based inference.
        </p>

        <p><strong>UNION Query Injection:</strong></p>
        <pre><code>
          {`id=sdf' UNION ALL SELECT CONCAT(0x716b6a7a71,0x455a4b73444d5a4949674a596f504147764c4e71524a5a64687443484846656e764b6e4572557266,0x71626b6271),NULL-- -`}
        </code></pre>
        <p>
          This UNION query injection combines specific hex-encoded values, allowing attackers to retrieve sensitive information from the database.
        </p>
      </div>

      <div className="content-section">
        <h2>4. Exploited Information</h2>
        <p>SQLMap successfully exfiltrated data from the database. The following information was retrieved:</p>
        <p><strong>Database Name:</strong> dvwa</p>
        <p><strong>Tables Identified:</strong></p>
        <ul>
          <li><strong>users</strong> - Columns: user, avatar, failed_login, first_name, last_login, last_name, password, user_id</li>
          <li><strong>guestbook</strong> - Columns: comment, name, comment_id</li>
        </ul>
        <p>
          <strong>Potential Impact:</strong> An attacker could obtain user credentials and personal information, or exploit user-generated content for further attacks.
        </p>
      </div>

      <div className="content-section">
        <h2>5. Risk and Impact Analysis</h2>
        <h3>5.1. Severity Rating</h3>
        <p><strong>CVSS Score:</strong> 9.8 (Critical)</p>
        <p>
          <strong>Impact:</strong> Data exfiltration, database manipulation, and potential full database compromise if administrative credentials are obtained.
        </p>

        <h3>5.2. Business Impact</h3>
        <p>
          Exploiting this SQL injection vulnerability can lead to data breaches, compliance violations, and reputational damage.
        </p>
      </div>

      <div className="content-section">
        <h2>6. Mitigation Recommendations</h2>
        <h3>6.1. Input Validation and Parameterized Queries</h3>
        <ul>
          <li>Implement strict input validation on all user inputs.</li>
          <li>Use parameterized queries or ORM to prevent SQL injections.</li>
        </ul>

        <h3>6.2. Error Handling</h3>
        <p>Disable detailed error messages in production environments.</p>

        <h3>6.3. Web Application Firewall (WAF)</h3>
        <p>Deploy a WAF to detect and block SQL injection attempts.</p>

        <h3>6.4. Least Privilege Access</h3>
        <p>Ensure the database user has the least privilege required for operations.</p>

        <h3>6.5. Regular Security Audits</h3>
        <p>Conduct regular security audits and penetration tests.</p>
      </div>

      <div className="content-section">
        <h2>7. Further Testing</h2>
        <ul>
          <li>Manual SQL Injection Attempts</li>
          <li>Privilege Escalation Testing</li>
          <li>Cross-Site Scripting (XSS)</li>
          <li>Session Management Testing</li>
        </ul>
      </div>

      <div className="content-section">
        <h2>8. Conclusion</h2>
        <p>
          The SQL injection vulnerability represents a critical flaw that could lead to severe data breaches. Immediate action should be taken to remediate this vulnerability.
        </p>
      </div>

      <div className="content-section">
        <h2>9. Appendix</h2>
        <ul>
          <li>Log Files: SQLMap output log (attached)</li>
          <li>Payloads and Queries: Detailed SQLMap payloads used during the assessment.</li>
        </ul>
      </div>
    </div>
  );
};

export default SQLInjectionVulnerabilityReport;
